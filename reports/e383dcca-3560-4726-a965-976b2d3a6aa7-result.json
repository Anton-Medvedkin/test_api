{"name": "test_login_without_password", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [504]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n>                   return complexjson.loads(self.content.decode(encoding), **kwargs)\n\nvenv\\Lib\\site-packages\\requests\\models.py:960: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x00000228F0D50F90>, s = 'Service unavailable', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test.test_CourierLogin.TestWithoutData object at 0x00000228F3542090>, base_url = 'http://qa-scooter.praktikum-services.ru/api/v1/'\n\n    def test_login_without_password(self, base_url):\n       logger.info(\"Testing order acceptance without order ID\")\n       json_data = {\n       \"login\": \"Vasiliy\"\n       }\n       response = requests.post(base_url + \"courier/login\", data=json_data)\n>      logger.debug(f\"Status code {response.status_code} was returned and message{response.json()}\")\n\ntest\\test_CourierLogin.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n>                   raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE                   requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nvenv\\Lib\\site-packages\\requests\\models.py:968: JSONDecodeError"}, "attachments": [{"name": "log", "source": "6ba138db-908c-4498-a7ea-7bac534ec431-attachment.txt", "type": "text/plain"}], "start": 1692635389832, "stop": 1692635450315, "uuid": "77a7713d-e984-4f52-9890-7674496f30ac", "historyId": "46f10ba66826f7134aefca13aa8bfe9a", "testCaseId": "46f10ba66826f7134aefca13aa8bfe9a", "fullName": "test.test_CourierLogin.TestWithoutData#test_login_without_password", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_CourierLogin"}, {"name": "subSuite", "value": "TestWithoutData"}, {"name": "host", "value": "DESKTOP-36NVPK8"}, {"name": "thread", "value": "8420-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_CourierLogin"}]}